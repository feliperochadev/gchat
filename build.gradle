import org.apache.tools.ant.taskdefs.condition.Os

ext {
	drivers = ["chrome", "phantomJs"]
	driversCI = ["phantomJs"]

	ext {
		groovyVersion 		= '2.3.10'
		
		springSecurityVersion = '4.0.0.RELEASE'
		
		jstlVersion			= '1.1.2'
		mysqlVersion 		= '5.1.34'
		hibernateVersion 	= '4.3.8.Final'
		cglibVersion 		= '3.1'
		jedisVersion		= '2.7.0'
		
		objenesisVersion 	= '2.1'
		
		gebVersion 			= '0.10.0'
		getJunitVersion 	= '0.10.0'
		mockitoVersion 		= '2.0.2-beta'
		chromeDriverVersion = '2.10'
        phantomJsVersion 	= '1.9.7'
		seleniumVersion 	= '2.43.1'
		spockVersion 		= '1.0-groovy-2.3'
	}
}

buildscript {
    repositories {
		mavenLocal()
        mavenCentral()
    }
    dependencies {
		classpath('net.saliman:gradle-liquibase-plugin:1.0.0')
		classpath('mysql:mysql-connector-java:5.1.34')
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.2.2.RELEASE')
		classpath('com.orange.redis-embedded:embedded-redis:0.6')
    }
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'war'
apply plugin: 'jacoco'
apply plugin: 'liquibase'
apply from	: "gradle/drivers_downloads.gradle"

liquibase {
	activities {
		main {
			changeLogFile 'migration/changelog-master.groovy'
			
			url 'jdbc:mysql://localhost:3306/groovy_chat'
			username 'root'
			password 'root'
		}
	}
	runList = 'main'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "br.leosilvadev.gchat.Application"

war {
	baseName = 'gchat'
	version =  '0.0.1'
}

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.3'
}

sourceSets.main.java.srcDirs = []
sourceSets.main.groovy.srcDirs = ["src/main/java", "src/main/groovy"]


dependencies {	
	runtime("javax.servlet:jstl:$jstlVersion")
	
	compile("org.codehaus.groovy:groovy-all:$groovyVersion")
	
	compile("org.springframework.boot:spring-boot-starter-data-jpa")
	compile("org.springframework.boot:spring-boot-starter-web")
	compile("org.springframework.boot:spring-boot-starter-actuator")
	compile("org.springframework.boot:spring-boot-starter-websocket")
	compile("org.springframework.boot:spring-boot-starter-security")
	compile("org.springframework:spring-messaging")
	
	compile("javax.mail:mail:1.4.1")
	compile("org.springframework:spring-context-support")
	
	compile("org.hibernate:hibernate-core:$hibernateVersion")
    compile("cglib:cglib-nodep:$cglibVersion")
	
	compile("mysql:mysql-connector-java:$mysqlVersion")
	compile("redis.clients:jedis:$jedisVersion")
	compile("com.h2database:h2")
	
	testCompile("junit:junit")
	testCompile("org.mockito:mockito-all:$mockitoVersion")
	testCompile("org.springframework.security:spring-security-test:$springSecurityVersion")
	testCompile("org.objenesis:objenesis:$objenesisVersion")
	
	testCompile("org.gebish:geb-spock:$gebVersion")
	testCompile("org.gebish:geb-junit4:$getJunitVersion")
	testCompile("org.gebish:geb-junit4:$gebVersion")
	testRuntime("org.seleniumhq.selenium:selenium-support:$seleniumVersion")
    testCompile("org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion")
	testCompile("com.github.detro.ghostdriver:phantomjsdriver:1.1.0") {
		transitive = false
	}
	
	testCompile("org.springframework:spring-test")
	testCompile("org.spockframework:spock-core:$spockVersion")
	testCompile("org.spockframework:spock-spring:$spockVersion")
}

//Define tasks for all drivers
drivers.each { driver ->
	task "${driver}Test"(type: Test) {
		reports {
			html.destination = reporting.file("$name/tests")
			junitXml.destination = file("$buildDir/test-results/$name")
		}

		outputs.upToDateWhen { false }  // Always run tests

		systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
		systemProperty "geb.env", driver
	}
}

//Task for configure tests for chrome
chromeTest {
	filter {
		includeTestsMatching "*ST"
	}
	
	dependsOn unzipChromeDriver

	def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
	systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

//Task for configure tests for phantomJS
phantomJsTest {
	filter {
		includeTestsMatching "*ST"
	}
	
	dependsOn unzipPhantomJs

	def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "phantomjs.exe" : "bin/phantomjs"
	systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}


task systemTest(){
	dependsOn drivers.collect { tasks["${it}Test"] }
}

task systemTestCI(){
	dependsOn driversCI.collect { tasks["${it}Test"] }
}

//Makes your 'test' phase depends on tests of all registered drivers
test {
    filter {
        includeTestsMatching "*Spec"
    }
	if (System.env.CI) {
		dependsOn tasks.systemTestCI
	} else {
		dependsOn tasks.systemTest
	}
}

test.finalizedBy(jacocoTestReport)

//Jacoco configuration, configurin jacoco report output dir
jacoco {
	reportsDir = file("$buildDir/reports/coverage")
}
